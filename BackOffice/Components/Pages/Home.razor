@page "/"
@using BackOffice.Services
@using Database.Models
@rendermode InteractiveAuto
@inject AnimalService AnimalService

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Gestión de Animales</MudText>

<MudTable Items="@animales" Dense="true" Hover="true" Loading="@loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Código RFID</MudTh>
        <MudTh>Fecha Registro</MudTh>
        <MudTh>Peso Actual (lbs)</MudTh>
        <MudTh>Raza</MudTh>
        <MudTh>Estado</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Código RFID">@context.CodigoRfid</MudTd>
        <MudTd DataLabel="Fecha Registro">@context.FechaRegistro.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="Peso Actual">@context.PesoActualLibras.ToString("F2")</MudTd>
        <MudTd DataLabel="Raza">@(context.Raza?.Nombre ?? "Sin raza")</MudTd>
        <MudTd DataLabel="Estado">@(context.EstadoAnimal?.Nombre ?? "Sin estado")</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No hay animales registrados</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Cargando animales...</MudText>
    </LoadingContent>
</MudTable>

<div class="d-flex justify-center mt-4">
    <MudPagination Count="@totalPages" 
                   Selected="@currentPage" 
                   SelectedChanged="OnPageChanged" 
                   ShowFirstButton="true" 
                   ShowLastButton="true" />
</div>

<MudText Typo="Typo.body2" Class="mt-2 text-center">
    Mostrando @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, totalItems) de @totalItems animales
</MudText>

@code {
    private List<Animale> animales = new();
    private bool loading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalItems = 0;
    private int totalPages => (int)Math.Ceiling((double)totalItems / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadAnimalesAsync();
    }

    private async Task LoadAnimalesAsync()
    {
        loading = true;
        StateHasChanged();

        try
        {
            var result = await AnimalService.GetAnimalesPaginadosAsync(currentPage, pageSize);
            animales = result.animales;
            totalItems = result.totalCount;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando animales: {ex.Message}");
            animales = new List<Animale>();
            totalItems = 0;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadAnimalesAsync();
    }
}
